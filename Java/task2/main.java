// This is where the execution of the software starts.
// We take in tasks given by the user as inputs and create appropriate threads
// for each task and run it.

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.file.Paths;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.io.*; 
import java.util.*; 

public class main{

	public static void main(String argv[]){

		// We take input from the input stream and determine if the person is a TA or CC
		Scanner scanner= new Scanner(System.in);
		System.out.println("\t\t\tEnter 1 if you are TA1");
		System.out.println("\t\t\tEnter 2 if you are TA2");
		System.out.println("\t\t\tEnter 3 if you are CC");
		System.out.printf("Kindly enter your role: ");

		String str= scanner.nextLine();
		// This vector will contain all threads generated by the main function in our case.
		Vector<CRUD_Operations_File> list_threads = new Vector<CRUD_Operations_File>();
		while (true){

			System.out.println("\t\t\tEnter 1 to generate file sorted on roll number");
			System.out.println("\t\t\tEnter 2 to generate file sorted on name");
			System.out.println("\t\t\tEnter 3 to update marks of a student");
			System.out.println("\t\t\tEnter e to exit");

			System.out.printf("Kindly enter your task: ");
			String task= scanner.nextLine();
			
			CRUD_Operations_File thread = new CRUD_Operations_File();

			// Depending on what the user wants, we call the appropriate functions
			if( task.equals("1")){
				thread.task = Constants.SORT_FILE_BY_ROLL_NUMBER;
			}
			else if( task.equals("2")){
				thread.task = Constants.SORT_FILE_BY_NAME;
			}
			else if( task.equals("3")){
				System.out.printf("Enter roll number of student: ");
				String roll_number= scanner.nextLine();

				System.out.printf("Enter change in marks (negative values to subtract marks from the current): ");
				int change_in_marks= Integer.parseInt(scanner.nextLine());

				// We take in input the values of roll number and change in marks
				// and then do the necesasry updates
				thread.task = Constants.UPDATE;
				thread.roll_number = roll_number;
				thread.change_in_marks = change_in_marks;
		
			}
			else if( task.equals("e")){
				return;
			}
			else{
				System.out.println("Wrong Input, Kindly enter again..!! ");
				continue;
			}
			// For all tasks, we create separate threads so that we can work 
			// and take more inputs till the mean time process the earlier requests
			// in the backgrounds
			// This is the primary reason why a thread based technique was used here
			System.out.println("Your task in running in the background...... ");
			System.out.println("You may give more tasks to run.... \n");
			thread.evaluator_role = Integer.parseInt(str);
			list_threads.add(thread);
			thread.start();
		}
	}
}
